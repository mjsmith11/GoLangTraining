package main

import (
	"bufio"
	"fmt"
	"io"
	"net"
	"strings"
)

var data = make(map[string]string)

func handle(conn net.Conn) {
	defer conn.Close()

	//NewScanner returns a new Scanner to read from r.
	// The split function defaults to scanlines
	scanner := bufio.NewScanner(conn)
	//Scann advances the Scanner to the next token, which will then be
	// available through the Bytes or Text method.
	for scanner.Scan() {
		//Text returns the most recent token generated by a call to Scan
		// as a newly allocated string holding its bytes/
		ln := scanner.Text()
		// splits around each instance of one or more whitespace
		fs := strings.Fields(ln)

		//ignore blank lines
		if len(fs) < 1 {
			continue
		}

		switch fs[0] {
		case "GET":
			key := fs[1]
			value := data[key]
			fmt.Fprintf(conn, "%s\n", value)
		case "SET":
			if len(fs) != 3 {
				io.WriteString(conn, "EXPECTED VALUE\n")
				continue
			}
			key := fs[1]
			value := fs[2]
			data[key] = value
		case "DEL":
			key := fs[1]
			delete(data, key)
		default:
			fmt.Println(ln)
			ln = fmt.Sprint("FROM SERVER - USAGE <GET | SEL | DEL> <KEY> [VAL]")
			fmt.Fprintln(conn, ln)
			//io.WriteString(conn, ln) //deos the same as above
		}
	}
}

func main() {
	ln, err := net.Listen("tcp", ":9000")
	if err != nil {
		panic(err)
	}
	defer ln.Close()

	for {
		conn, err := ln.Accept()
		if err != nil {
			panic(err)
		}

		//only handles a single connection at once
		//io.Copy(conn, conn)
		handle(conn)
		conn.Close()
	}
}

//run this then,
// telnet localhost 9000
